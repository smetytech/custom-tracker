(function(i,a){typeof exports=="object"&&typeof module<"u"?module.exports=a():typeof define=="function"&&define.amd?define(a):(i=typeof globalThis<"u"?globalThis:i||self,i.AnalyticsTracker=a())})(this,(function(){"use strict";class i{constructor(e){if(!e||!e.accessKey){console.error("Tracker Error: An accessKey is required in the configuration object.");return}this.accessKey=e.accessKey,this.apiEndpoint=e.apiEndpoint||"https://api.your-service.com/events",this.isTracking=!1,this.handleGlobalClick=this.handleGlobalClick.bind(this)}handleGlobalClick(e){const n=e.target.closest("[data-track-event]");if(!n)return;const t={...n.dataset},s=t.trackEvent||t.track||t.goal||"click";delete t.trackEvent,delete t.track,delete t.goal,console.log("Element clicked with tracking data:",{event:s,...t}),this.sendEvent(s,t)}track(e,n={}){if(!e){console.error("Tracker Error: An eventName is required for manual tracking.");return}this.sendEvent(e,n)}async sendEvent(e,n){const t={event:e,properties:{...n,url:window.location.href,path:window.location.pathname,timestamp:new Date().toISOString()},accessKey:this.accessKey};if(console.log("Tracking Event:",t),typeof navigator.sendBeacon=="function"){const s=new Blob([JSON.stringify(t)],{type:"application/json"});navigator.sendBeacon(this.apiEndpoint,s)}}start(){if(this.isTracking){console.warn("Tracker is already running.");return}console.log("Analytics tracking started."),document.addEventListener("click",this.handleGlobalClick,{capture:!0}),this.isTracking=!0}stop(){this.isTracking&&(console.log("Analytics tracking stopped."),document.removeEventListener("click",this.handleGlobalClick,{capture:!0}),this.isTracking=!1)}}return i}));
