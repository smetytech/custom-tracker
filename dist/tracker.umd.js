(function(n,a){typeof exports=="object"&&typeof module<"u"?module.exports=a():typeof define=="function"&&define.amd?define(a):(n=typeof globalThis<"u"?globalThis:n||self,n.AnalyticsTracker=a())})(this,(function(){"use strict";class n{constructor(e){if(!e||!e.accessKey){console.error("Tracker Error: An accessKey is required in the configuration object.");return}this.accessKey=e.accessKey,this.apiEndpoint=e.apiEndpoint||"https://api.your-service.com/events",this.isTracking=!1,this.handleGlobalClick=this.handleGlobalClick.bind(this),this.handleVisibilityChange=this.handleVisibilityChange.bind(this)}handleGlobalClick(e){const i=e.target.closest("[data-track-event]");if(i){const t={...i.dataset},s=t.trackEvent;delete t.trackEvent,this.sendEvent(s,t)}}handleVisibilityChange(){document.visibilityState==="hidden"?this.sendEvent("page_hidden",{duration_ms:Math.round(performance.now())}):document.visibilityState==="visible"&&this.sendEvent("page_visible")}track(e,i={}){if(!e){console.error("Tracker Error: An eventName is required for manual tracking.");return}this.sendEvent(e,i)}async sendEvent(e,i){const t={event:e,properties:{...i,url:window.location.href,path:window.location.pathname,timestamp:new Date().toISOString()},accessKey:this.accessKey};if(console.log("Tracking Event:",t),typeof navigator.sendBeacon=="function"){const s=new Blob([JSON.stringify(t)],{type:"application/json"});navigator.sendBeacon(this.apiEndpoint,s)}else try{await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.accessKey}`},body:JSON.stringify(t),keepalive:!0})}catch(s){console.error("Tracker API Error:",s)}}start(){if(this.isTracking){console.warn("Tracker is already running.");return}console.log("Analytics tracking started."),document.addEventListener("click",this.handleGlobalClick,{capture:!0}),document.addEventListener("visibilitychange",this.handleVisibilityChange),this.isTracking=!0,this.sendEvent("page_view")}stop(){this.isTracking&&(console.log("Analytics tracking stopped."),document.removeEventListener("click",this.handleGlobalClick,{capture:!0}),document.removeEventListener("visibilitychange",this.handleVisibilityChange),this.isTracking=!1)}}return n}));
